package transimgs

import (
	//	"fmt"
	"image"
	"image/draw"
	"image/png"
	"net/http"
	"regexp"
	"strconv"
	"strings"
)

func init() {
	http.HandleFunc("/", handler)
}

func handler(w http.ResponseWriter, r *http.Request) {
	width, height := getDimensions(r.URL.Path)
	width, height = applyGcd(width, height)
	w.Header().Set("Content-Type", "image/png")
	png.Encode(w, drawImage(width, height))
}

func drawImage(width, height int) (img draw.Image) {
	img = image.NewRGBA(image.Rect(0, 0, width, height))
	draw.Draw(img, img.Bounds(), image.Transparent, image.ZP, draw.Src)
	return
}

func getDimensions(path string) (width, height int) {
	path = strings.ToLower(strings.TrimPrefix(path, "/"))
	firstPathPart := strings.SplitN(path, "x", 2)
	secondPathPart := strings.SplitN(firstPathPart[1], "/", 2)
	width, _ = strconv.Atoi(cleanDimension(firstPathPart[0]))
	height, _ = strconv.Atoi(cleanDimension(secondPathPart[0]))
	actualToken := cleanActualFlag(secondPathPart[1])
	if width < 1 || height < 1 {
		width = 1
		height = 1
		return
	}
	_ = actualToken
	return
}

//	if len(splitPath) == 3 {
//		actualToken = splitPath[2]
//		actualToken = cleanActualFlag(actualToken)
//		if actualToken == "a" {
//			width = cleanDimension(width)
//			height = cleanDimension(height)
//			width, _ = strconv.Atoi(splitPath[0])
//			height, _ = strconv.Atoi(splitPath[1])
//			return
//		}
//	}
//	if len(splitPath) == 1 {
//		width, _ = strconv.Atoi(splitPath[0])
//		height = width
//	} else if len(splitPath) == 2 {
//		width, _ = strconv.Atoi(splitPath[0])
//		height, _ = strconv.Atoi(splitPath[1])
//	} else {
//		width = 1
//		height = 1
//	}
//	if width == 0 || height == 0 {
//		width = 1
//		height = 1
//	}
//	return
//}

func cleanDimension(dirty string) (clean string) {
	reg := regexp.MustCompile("[^x0-9]+")
	clean = reg.ReplaceAllString(dirty, "")
	return
}

func cleanActualFlag(dirty string) (clean string) {
	reg := regexp.MustCompile("[^a]+")
	clean = reg.ReplaceAllString(dirty, "")
	return
}

func applyGcd(x, y int) (int, int) {
	a, b := x, y
	if a == 0 || b == 0 {
		a = 1
	} else {
		for b != 0 {
			a, b = b, a%b
		}

	}
	return x / a, y / a
}
